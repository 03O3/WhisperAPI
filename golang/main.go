package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog"
)

var (
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	whisperHost = getEnv("WHISPER_HOST", "127.0.0.1")
	whisperPort = getEnv("WHISPER_PORT", "9000")
	serverPort  = getEnv("SERVER_PORT", "8080")
	// –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (debug/release)
	ginMode = getEnv("GIN_MODE", "debug")
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Whisper
var whisperClient *WhisperClient

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnv(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
func init() {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Gin
	gin.SetMode(ginMode)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º Whisper
	whisperClient = NewWhisperClient(whisperHost, whisperPort)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
func main() {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
	gin.DefaultWriter = logger

	// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
	router := gin.New()

	// Middleware
	router.Use(gin.Recovery())
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))
	router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
		return fmt.Sprintf("[%s] | %3d | %13v | %15s | %-7s %s\n%s",
			param.TimeStamp.Format("2006/01/02 - 15:04:05"),
			param.StatusCode,
			param.Latency,
			param.ClientIP,
			param.Method,
			param.Path,
			param.ErrorMessage,
		)
	}))

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
	router.SetTrustedProxies([]string{"127.0.0.1"})

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (20MB)
	router.MaxMultipartMemory = 20 << 20

	// –ì—Ä—É–ø–ø–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
	api := router.Group("/api")
	{
		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
		api.GET("/models", getModelsHandler)

		// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
		api.POST("/transcribe", transcribeHandler)

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
		api.GET("/health", healthCheckHandler)

		// –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
		api.GET("/metrics", metricsHandler)
	}

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	router.Static("/static", "./static")
	router.StaticFile("/", "./static/index.html")

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É %s –≤ —Ä–µ–∂–∏–º–µ %s...", serverPort, ginMode)
	if err := router.Run(":" + serverPort); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
func healthCheckHandler(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"status":      "ok",
		"server_time": time.Now().Format(time.RFC3339),
		"version":     "1.0.0",
		"uptime":      time.Since(startTime).String(),
		"mode":        ginMode,
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
func getModelsHandler(c *gin.Context) {
	models, err := whisperClient.ListModels()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: %v", err),
		})
		return
	}

	c.JSON(http.StatusOK, models)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞
func metricsHandler(c *gin.Context) {
	metrics := whisperClient.GetMetrics()
	c.JSON(http.StatusOK, gin.H{
		"requests_total":     metrics.RequestsTotal,
		"errors_total":       metrics.ErrorsTotal,
		"processing_time_ms": metrics.ProcessingTimeMs,
		"uptime":             time.Since(startTime).String(),
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ
func transcribeHandler(c *gin.Context) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
	file, err := c.FormFile("file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + err.Error()})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100 –ú–ë)
	if file.Size > 100*1024*1024 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 –ú–ë"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	tempFile, err := os.CreateTemp("", "whisper-upload-*.tmp")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: " + err.Error()})
		return
	}
	defer os.Remove(tempFile.Name())
	defer tempFile.Close()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	if err := c.SaveUploadedFile(file, tempFile.Name()); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + err.Error()})
		return
	}

	log.Printf("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ %s (%.2f –ú–ë)", file.Filename, float64(file.Size)/1024/1024)

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	model := c.DefaultPostForm("model", "base")
	var language *string
	if langValue := c.PostForm("language"); langValue != "" {
		language = &langValue
	}
	task := c.DefaultPostForm("task", "transcribe")

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
	startTime := time.Now()
	result, err := whisperClient.Transcribe(tempFile.Name(), model, language, task)
	elapsedTime := time.Since(startTime)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: %v", err),
		})
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	c.JSON(http.StatusOK, gin.H{
		"status": "success",
		"data":   result,
		"metrics": gin.H{
			"processing_time": elapsedTime.String(),
			"file_size":       file.Size,
			"model":           model,
			"language":        language,
			"task":            task,
		},
	})
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
var startTime = time.Now()
